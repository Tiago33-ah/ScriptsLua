local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Rayfield/main/source"))()

local Window = Rayfield:CreateWindow({
    Name = "Player Cheats",
    LoadingTitle = "Loading Player Cheats...",
    LoadingSubtitle = "by AKASHI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "PlayerCheatsConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false
})

local toggles = {
    fly = false,
    noclip = false,
    antiAfk = false,
    godMode = false
}
local speeds = {
    walkspeed = 16,
    jumppower = 50
}

local flying = false
local bodyVelocity, bodyGyro

local function startFly()
    if flying then return end
    flying = true
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(1e5,1e5,1e5)
    bodyVelocity.Velocity = Vector3.new(0,0,0)
    bodyVelocity.Parent = rootPart
    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(1e5,1e5,1e5)
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.Parent = rootPart
    RunService:BindToRenderStep("Fly", Enum.RenderPriority.Character.Value, function()
        if not flying then
            if bodyVelocity then bodyVelocity:Destroy() bodyVelocity=nil end
            if bodyGyro then bodyGyro:Destroy() bodyGyro=nil end
            RunService:UnbindFromRenderStep("Fly")
            return
        end
        local camCF = workspace.CurrentCamera.CFrame
        local moveVec = Vector3.new()
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveVec = moveVec + camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveVec = moveVec - camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveVec = moveVec - camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveVec = moveVec + camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveVec = moveVec + Vector3.new(0,1,0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then moveVec = moveVec - Vector3.new(0,1,0) end
        if moveVec.Magnitude > 0 then
            moveVec = moveVec.Unit * 50
        end
        bodyVelocity.Velocity = moveVec
        bodyGyro.CFrame = camCF
    end)
end

local function stopFly()
    flying = false
    if bodyVelocity then bodyVelocity:Destroy() bodyVelocity=nil end
    if bodyGyro then bodyGyro:Destroy() bodyGyro=nil end
end

local function setNoClip(enabled)
    if enabled then
        RunService:BindToRenderStep("NoClip", Enum.RenderPriority.Character.Value, function()
            for _, part in ipairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
    else
        RunService:UnbindFromRenderStep("NoClip")
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

local antiAfkConnection

local function setAntiAfk(enabled)
    if enabled then
        antiAfkConnection = player.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    else
        if antiAfkConnection then
            antiAfkConnection:Disconnect()
            antiAfkConnection = nil
        end
    end
end

local godModeConnection

local function setGodMode(enabled)
    if enabled then
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
        godModeConnection = humanoid.HealthChanged:Connect(function()
            if humanoid.Health < humanoid.MaxHealth then
                humanoid.Health = humanoid.MaxHealth
            end
        end)
    else
        humanoid.MaxHealth = 100
        humanoid.Health = 100
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, true)
        if godModeConnection then
            godModeConnection:Disconnect()
            godModeConnection = nil
        end
    end
end

Window:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Flag = "flyToggle",
    Callback = function(state)
        toggles.fly = state
        if state then
            startFly()
        else
            stopFly()
        end
    end
})

Window:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "noclipToggle",
    Callback = function(state)
        toggles.noclip = state
        setNoClip(state)
    end
})

Window:CreateToggle({
    Name = "Anti AFK",
    CurrentValue = false,
    Flag = "antiAfkToggle",
    Callback = function(state)
        toggles.antiAfk = state
        setAntiAfk(state)
    end
})

Window:CreateToggle({
    Name = "God Mode",
    CurrentValue = false,
    Flag = "godModeToggle",
    Callback = function(state)
        toggles.godMode = state
        setGodMode(state)
    end
})

Window:CreateSlider({
    Name = "WalkSpeed",
    Min = 16,
    Max = 250,
    Default = humanoid.WalkSpeed,
    Flag = "walkSpeedSlider",
    Callback = function(value)
        speeds.walkspeed = value
        humanoid.WalkSpeed = value
    end
})

Window:CreateSlider({
    Name = "JumpPower",
    Min = 50,
    Max = 250,
    Default = humanoid.JumpPower,
    Flag = "jumpPowerSlider",
    Callback = function(value)
        speeds.jumppower = value
        humanoid.JumpPower = value
    end
})

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    humanoid.WalkSpeed = speeds.walkspeed
    humanoid.JumpPower = speeds.jumppower
    if toggles.godMode then
        setGodMode(true)
    end
    if toggles.noclip then
        setNoClip(true)
    end
    if toggles.fly then
        startFly()
    end
end)
